# AI Music Generation System

A production-ready AI platform that transforms background tracks into complete musical compositions with vocal elements. The system leverages GETMusic and Dreamtonics technologies through a modular, containerized architecture with reliable job management.

![Music Generation Flow](https://via.placeholder.com/800x200?text=AI+Music+Generation+Workflow)

## ✨ Features

- **Automated Melody Generation**: Transform background tracks into MIDI melodies using AI
- **Vocal Synthesis Integration**: Mix generated melodies with background tracks for complete compositions
- **User-friendly Interface**: Intuitive Gradio-based web UI for all operations
- **Robust Job Management**: Asynchronous processing with real-time status tracking
- **Containerized Architecture**: Fully portable with Docker for consistent deployment across environments

## 🏗️ System Architecture

The system employs a microservices architecture with the following components:

| Component | Purpose | Technology |
|-----------|---------|------------|
| Melody Generation Service | Creates MIDI files from background tracks | GETMusic AI Model |
| Vocal Mixing Service | Combines melodies with original tracks | Dreamtonics Engine |
| Web Application | User interface and job submission | Gradio + Flask |
| Database | Job tracking and result storage | PostgreSQL |
| Job Manager | Asynchronous task orchestration | Custom Python Worker |

### Directory Structure

```
project-root/
├── docker-compose.yml          # Service orchestration
├── .env                        # Environment configuration
├── shared_data/                # Volume for file exchange
│   ├── input/                  # Uploaded background tracks
│   ├── melody_results/         # Generated MIDI files
│   └── vocal_results/          # Final mixed compositions
├── app/                        # Integrated Application
│   ├── app.py                  # Gradio UI and API endpoints
│   ├── services.py             # Service communication layer
│   ├── models.py               # Database models
│   ├── job_manager.py          # Background worker
│   ├── alembic.ini             # Database migration config
│   └── alembic/                # Migration scripts
├── tmik_bgm_conditional_melody_generation/  # Melody Generation Service
└── tmik_make_vocal_mix/        # Vocal Mixing Service
```

## 🚀 Getting Started

### Prerequisites

- **Docker Engine** v20.10+ and **Docker Compose** v2.0+
- At least 8GB RAM and 20GB disk space
- NVIDIA GPU (optional, significantly improves performance)

### Quick Start

1. **Clone the repository:**
   ```bash
   git clone https://github.com/yourusername/ai-music-generation.git
   cd ai-music-generation
   ```

2. **Configure your environment:**
   ```bash
   cp .env.example .env
   # Edit .env with your preferred settings
   ```

3. **Place model checkpoints:**
   Download the GETMusic checkpoint file and place it in:
   ```
   tmik_bgm_conditional_melody_generation/checkpoints/
   ```

4. **Launch the system:**
   ```bash
   docker-compose up -d
   ```

5. **Access the web interface:**
   Open your browser to http://localhost:8080

## 💻 Using the Application

### Creating Music

1. **Upload your background track** (WAV format, 44.1kHz recommended)
2. **Configure generation parameters:**
   - Beat Detection Sensitivity: Adjust how the AI detects musical beats
   - Creative Randomness: Higher values produce more unique compositions
   - Vocal Style: Choose from various vocal characteristics
3. **Click "Generate Music"** and the system will:
   - Create a job in the queue
   - Generate a melody based on your track
   - Mix the melody with vocals
   - Present the final composition

### Managing Jobs

- Use the **Jobs Dashboard** tab to:
  - View all submitted jobs
  - Check processing status
  - Download results
  - Cancel pending jobs

## 🔍 Troubleshooting

| Issue | Solution |
|-------|----------|
| Job stuck in "Processing" | Check Docker logs with `docker-compose logs melody-service` |
| Database connection errors | Verify PostgreSQL container is running and DATABASE_URL is correct |
| Audio playback issues | Ensure your browser supports the WAV format (Chrome/Firefox recommended) |

For any other issues, check the logs:
```bash
docker-compose logs -f integrated-app
```

## 🛠️ Development and Extension

### Adding New Models

The system is designed for modularity. To integrate a new AI model:

1. Create a new service container with its dependencies
2. Add appropriate service definitions to `docker-compose.yml`
3. Extend the `services.py` file to communicate with your new container
4. Update the UI in `app.py` to expose new functionality

### Database Migrations

When modifying the database schema:
```bash
# Generate a migration
docker-compose exec integrated-app alembic revision -m "description"

# Apply migrations
docker-compose exec integrated-app alembic upgrade head
```

## 📄 License and Attribution

This project integrates third-party components with their respective licenses:
- GETMusic: Research use only, see original repository for terms
- Dreamtonics: Commercial use may require licensing

## 🌟 Contributing

Contributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

---
